{"version":3,"sources":["components/NewTaskForm.js","components/Task.js","components/TaskList.js","components/TaskFilter.js","components/Footer.js","components/constants/constants.js","components/App.js","index.js"],"names":["NewTaskForm","state","label","onLabelChange","event","setState","target","value","onSubmit","preventDefault","props","addItem","className","this","type","placeholder","autoFocus","onChange","PureComponent","Task","editItem","onDeleted","onToggleCompleted","onToggleEditing","completed","editing","classNames","defaultValue","onClick","formatDistanceToNow","Date","addSuffix","includeSeconds","TaskList","elements","todoData","active","selected","filter","item","map","id","itemProps","TaskFilter","onToggleSelected","Footer","todo","showCompletedTasks","onClear","elementFilter","itemId","createTodoItem","undefined","filterElem","Form","deleteItem","idx","findIndex","el","slice","text","newItem","toggleProperty","toggleSelected","arr","propName","oldItem","obj","activeTaskLength","length","all","ReactDOM","render","document","getElementById","App"],"mappings":"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","file":"static/js/main.0d609e82.chunk.js","sourcesContent":["import React, {PureComponent} from 'react';\r\n\r\nexport default class NewTaskForm extends PureComponent {\r\n    state = {\r\n        label: ''\r\n    };\r\n    onLabelChange = (event) => {\r\n        this.setState({\r\n            label: event.target.value\r\n        });\r\n    };\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.addItem(this.state.label);\r\n        this.setState({\r\n            label: ''\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <header className='header'>\r\n                <h1>todos</h1>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <input type='text'\r\n                           className=\"new-todo\"\r\n                           placeholder=\"What needs to be done?\" autoFocus={true}\r\n                           onChange={this.onLabelChange}\r\n                           value={this.state.label}/>\r\n                </form>\r\n            </header>\r\n        );\r\n    };\r\n};","import React, {PureComponent} from 'react';\r\nimport {formatDistanceToNow} from 'date-fns';\r\nimport classNames from \"classnames\";\r\n\r\nexport default class Task extends PureComponent {\r\n    state = {\r\n        label: ''\r\n    };\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.editItem(this.state.label);\r\n        this.setState({\r\n            label: ''\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {label, onDeleted, onToggleCompleted, onToggleEditing, completed, editing} = this.props;\r\n        return ((editing) ? (\r\n                <li className={classNames({editing})}>\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <input type=\"text\" className=\"edit\"\r\n                               onChange={this.props.onLabelChange(this.state.label)}\r\n                               defaultValue={this.state.label}/>\r\n                    </form>\r\n                </li>) : (\r\n                <li className={classNames({completed})}>\r\n                    <div className=\"view\">\r\n                        <input className=\"toggle\" type=\"checkbox\" onClick={onToggleCompleted}/>\r\n                        <label>\r\n                            <span className=\"description\">{label}</span>\r\n                            <span className=\"created\">created {formatDistanceToNow(new Date(), {\r\n                                addSuffix: true,\r\n                                includeSeconds: true\r\n                            })}\r\n                        </span>\r\n                        </label>\r\n                        <button className=\"icon icon-edit\" onClick={onToggleEditing}/>\r\n                        <button className=\"icon icon-destroy\" onClick={onDeleted}/>\r\n                    </div>\r\n                </li>)\r\n        );\r\n    };\r\n};","import React, {PureComponent} from 'react';\r\nimport Task from \"./Task\";\r\n\r\nexport default class TaskList extends PureComponent {\r\n    state = {\r\n        label: ''\r\n    };\r\n    onLabelChange = (event) => {\r\n        this.setState({\r\n            label: event.target.value\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {todoData, onDeleted, onToggleCompleted, onToggleEditing, editItem, active, completed} = this.props;\r\n        let elements;\r\n        (completed.selected) ? (elements = todoData.filter(item => item.completed).map((item) => {\r\n            const {id, ...itemProps} = item;\r\n            return (\r\n                <span key={id}>\r\n                        <Task {...itemProps}\r\n                              onDeleted={() => onDeleted(id)}\r\n                              onToggleCompleted={() => onToggleCompleted(id)}\r\n                              onToggleEditing={() => onToggleEditing(id)}\r\n                              onLabelChange={() => this.onLabelChange}\r\n                              editItem={() => editItem(id, this.state.label)}/>\r\n                    </span>);\r\n        })) : (active.selected) ? (\r\n            elements = todoData.filter(item => !item.completed).map((item) => {\r\n                const {id, ...itemProps} = item;\r\n                return (\r\n                    <span key={id}>\r\n                        <Task {...itemProps}\r\n                              onDeleted={() => onDeleted(id)}\r\n                              onToggleCompleted={() => onToggleCompleted(id)}\r\n                              onToggleEditing={() => onToggleEditing(id)}\r\n                              onLabelChange={() => this.onLabelChange}\r\n                              editItem={() => editItem(id, this.state.label)}/>\r\n                            </span>\r\n                );\r\n            })) : (elements = todoData.map((item) => {\r\n            const {id, ...itemProps} = item;\r\n            return (\r\n                <span key={id}>\r\n                        <Task {...itemProps}\r\n                              onDeleted={() => onDeleted(id)}\r\n                              onToggleCompleted={() => onToggleCompleted(id)}\r\n                              onToggleEditing={() => onToggleEditing(id)}\r\n                              onLabelChange={() => this.onLabelChange}\r\n                              editItem={() => editItem(id, this.state.label)}/>\r\n                        </span>\r\n            );\r\n        }));\r\n\r\n        return (\r\n            <ul className=\"todo-list\">\r\n                {elements}\r\n            </ul>);\r\n    };\r\n};","import React, {PureComponent} from 'react';\r\nimport classNames from \"classnames\";\r\n\r\nexport default class TaskFilter extends PureComponent {\r\n    render() {\r\n        const {label, selected, onToggleSelected} = this.props;\r\n        return (\r\n            <button className={classNames({selected})}\r\n                    onClick={onToggleSelected}>{label}\r\n            </button>\r\n        );\r\n    };\r\n};","import React, {PureComponent} from 'react';\r\nimport TaskFilter from \"./TaskFilter\";\r\n\r\nexport default class Footer extends PureComponent {\r\n    render() {\r\n        const {elements, todo, onToggleSelected, showCompletedTasks, onClear} = this.props;\r\n        const elementFilter = elements.map((item) => {\r\n            const {id, ...itemProps} = item;\r\n            return (\r\n                <li key={id}>\r\n                    <TaskFilter\r\n                        {...itemProps}\r\n                        onToggleSelected={() => onToggleSelected(id)}\r\n                        showCompletedTasks={() => showCompletedTasks(id)}\r\n                    />\r\n                </li>\r\n            );\r\n        });\r\n        return (\r\n            <footer className=\"footer\">\r\n                <span className=\"todo-count\">{todo} items left</span>\r\n                <ul className=\"filters\">\r\n                    {elementFilter}\r\n                </ul>\r\n                <button className=\"clear-completed\" onClick={onClear}>Clear completed</button>\r\n            </footer>\r\n        );\r\n    };\r\n};","let itemId = 1;\r\nconst createTodoItem = (label, completed = undefined, editing = undefined, selected = undefined) => {\r\n    return {\r\n        label,\r\n        id: itemId++,\r\n        completed,\r\n        editing,\r\n        selected,\r\n    };\r\n};\r\nconst filterElem = [\r\n    createTodoItem('All', undefined, undefined, false),\r\n    createTodoItem('Active', undefined, undefined, false),\r\n    createTodoItem('Completed', undefined, undefined, false),\r\n];\r\nconst todoData = [\r\n    createTodoItem('Completed task', false, false),\r\n    createTodoItem('Editing task', false, false),\r\n    createTodoItem('Active task', false, false),\r\n];\r\nexport {filterElem, todoData, createTodoItem};","import React, {PureComponent} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport NewTaskForm from \"./NewTaskForm\";\r\nimport TaskList from \"./TaskList\";\r\nimport Footer from \"./Footer\";\r\nimport {todoData, filterElem, createTodoItem} from \"./constants/constants\";\r\n\r\nclass Form extends PureComponent {\r\n    itemId = 1;\r\n    state = {\r\n        filterElem,\r\n        todoData,\r\n    };\r\n    deleteItem = (id) => {\r\n        this.setState(({todoData}) => {\r\n            const idx = todoData.findIndex((el) => el.id === id);\r\n            const newArray = [...todoData.slice(0, idx), ...todoData.slice(idx + 1)];\r\n            return {\r\n                todoData: newArray\r\n            };\r\n        });\r\n    };\r\n    editItem = (id, text) => {\r\n        this.setState(({todoData}) => {\r\n            const idx = todoData.findIndex((el) => el.id === id);\r\n            const newItem = createTodoItem(text);\r\n            const newArray = [...todoData.slice(0, idx), newItem, ...todoData.slice(idx + 1)];\r\n            return {\r\n                todoData: newArray\r\n            };\r\n        });\r\n    };\r\n    addItem = (text) => {\r\n        const newItem = createTodoItem(text);\r\n        this.setState(({todoData}) => {\r\n            const newArr = [...todoData, newItem];\r\n            return {\r\n                todoData: newArr\r\n            };\r\n        });\r\n    };\r\n\r\n    toggleProperty(arr, id, propName) {\r\n        const idx = arr.findIndex((el) => el.id === id);\r\n        const oldItem = arr[idx];\r\n        const newItem = {...oldItem, [propName]: !oldItem[propName]};\r\n        return [...arr.slice(0, idx),\r\n            newItem,\r\n            ...arr.slice(idx + 1)];\r\n    };\r\n\r\n    toggleSelected(arr, id) {\r\n        const idx = arr.findIndex((el) => el.id === id);\r\n        const oldItem = arr[idx];\r\n        const newItem = {...oldItem, selected: !oldItem.selected};\r\n        let newArr = [...arr.slice(0, idx),\r\n            newItem,\r\n            ...arr.slice(idx + 1)];\r\n        return newArr.map(obj => obj !== newItem ? {...obj, selected: false} : {...obj, selected: true});\r\n    }\r\n\r\n    onToggleCompleted = (id) => {\r\n        this.setState(({todoData}) => {\r\n            return {\r\n                todoData: this.toggleProperty(todoData, id, 'completed')\r\n            };\r\n        });\r\n    };\r\n    onToggleEditing = (id) => {\r\n        this.setState(({todoData}) => {\r\n            return {\r\n                todoData: this.toggleProperty(todoData, id, 'editing')\r\n            };\r\n        });\r\n    };\r\n\r\n    onToggleSelected = (id) => {\r\n        this.setState(({filterElem}) => {\r\n            return {filterElem: this.toggleSelected(filterElem, id, 'selected')};\r\n        });\r\n    };\r\n    onClear = () => {\r\n        this.setState(({todoData}) => {\r\n            const newArr = (todoData.filter(item => !item.completed))\r\n            return {\r\n                todoData: newArr\r\n            };\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {todoData, filterElem} = this.state;\r\n        const activeTaskLength = todoData.filter((el) => !el.completed).length;\r\n        const [all, active, completed] = filterElem;\r\n        return (\r\n            <><NewTaskForm addItem={this.addItem}/>\r\n                <section className='main'>\r\n                    <TaskList todoData={todoData}\r\n                              onDeleted={this.deleteItem}\r\n                              onToggleCompleted={this.onToggleCompleted}\r\n                              onToggleEditing={this.onToggleEditing}\r\n                              editItem={this.editItem}\r\n                              all={all}\r\n                              active={active}\r\n                              completed={completed}/>\r\n                    <Footer elements={filterElem}\r\n                            todo={activeTaskLength}\r\n                            onToggleSelected={this.onToggleSelected}\r\n                            onClear={this.onClear}/>\r\n                </section>\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nconst App = () => {\r\n    ReactDOM.render(<Form/>, document.getElementById('todoapp'));\r\n};\r\nexport default App;","import './style.scss';\r\nimport App from './components/App';\r\nApp();"],"sourceRoot":""}