{"version":3,"sources":["components/NewTaskForm.js","components/TimeOfCreationTask.js","components/Task.js","components/TaskList.js","components/TaskFilter.js","components/Footer.js","components/constants/constants.js","components/App.js","index.js"],"names":["NewTaskForm","state","label","onLabelChange","event","setState","target","value","onSubmit","preventDefault","props","addItem","className","this","type","placeholder","autoFocus","onChange","PureComponent","TimeOfCreationTask","date","getDate","formatDistanceToNow","addSuffix","includeSeconds","timerID","setInterval","clearInterval","componentDidMount","Task","Date","editItem","onDeleted","onToggleCompleted","onToggleEditing","completed","editing","classNames","defaultValue","onClick","defaultProps","console","log","TaskList","elements","todoData","active","selected","filter","item","map","id","itemProps","TaskFilter","onToggleSelected","Footer","activeTaskLength","onClear","elementFilter","itemId","createTodoItem","undefined","filterElem","Form","deleteItem","idx","findIndex","el","slice","text","newItem","toggleProperty","toggleSelected","arr","propName","oldItem","obj","length","all","ReactDOM","render","document","getElementById","App"],"mappings":"0NAEqBA,E,4MACjBC,MAAQ,CACJC,MAAO,I,EAEXC,cAAgB,SAACC,GACb,EAAKC,SAAS,CACVH,MAAOE,EAAME,OAAOC,S,EAG5BC,SAAW,SAACJ,GACRA,EAAMK,iBACN,EAAKC,MAAMC,QAAQ,EAAKV,MAAMC,OAC9B,EAAKG,SAAS,CACVH,MAAO,M,4CAIf,WACI,OACI,yBAAQU,UAAU,SAAlB,UACI,uCACA,sBAAMJ,SAAUK,KAAKL,SAArB,SACI,uBAAOM,KAAK,OACLF,UAAU,WACVG,YAAY,yBAAyBC,WAAW,EAChDC,SAAUJ,KAAKV,cACfI,MAAOM,KAAKZ,MAAMC,iB,GA1BJgB,iB,gCCCpBC,E,4MACjBlB,MAAQ,CACJmB,KAAM,I,EAWVC,QAAU,WACN,IAAID,EAAOE,YAAoB,EAAKZ,MAAMU,KAAM,CAACG,WAAW,EAAMC,gBAAgB,IAClF,EAAKnB,SAAS,CAACe,U,uDAVnB,WAAqB,IAAD,OAChBP,KAAKY,QAAUC,aAAY,kBAAM,EAAKL,YAAW,K,kCAGrD,WACIM,cAAcd,KAAKY,W,oBAQvB,WACI,IAAOL,EAAQP,KAAKZ,MAAbmB,KACP,OACI,sBAAMZ,SAAUK,KAAKe,kBAArB,SACJ,uBAAMhB,UAAU,UAAhB,qBACaQ,W,GAvB2BF,iBCG3BW,E,4MACjB5B,MAAQ,CACJC,MAAO,GACPkB,KAAM,IAAIU,M,EA2BdtB,SAAW,SAACJ,GACRA,EAAMK,iBACN,EAAKC,MAAMqB,SAAS,EAAK9B,MAAMC,OAC/B,EAAKG,SAAS,CACVH,MAAO,M,4CAIf,WACI,MAAkGW,KAAKH,MAAhGR,EAAP,EAAOA,MAAO8B,EAAd,EAAcA,UAAWC,EAAzB,EAAyBA,kBAAmBC,EAA5C,EAA4CA,gBAAiBC,EAA7D,EAA6DA,UAAWC,EAAxE,EAAwEA,QAASjC,EAAjF,EAAiFA,cACjF,OAASiC,EACD,oBAAIxB,UAAWyB,IAAW,CAACD,YAA3B,SACI,sBAAM5B,SAAUK,KAAKL,SAArB,SACI,uBAAOM,KAAK,OAAOF,UAAU,OACtBK,SAAUd,EAAcU,KAAKZ,MAAMC,OACnCoC,aAAczB,KAAKZ,MAAMC,MACzBc,WAAW,QAG1B,oBAAIJ,UAAWyB,IAAW,CAACF,cAA3B,SACI,sBAAKvB,UAAU,OAAf,UACI,uBAAOA,UAAU,SAASE,KAAK,WAAWyB,QAASN,IACnD,kCACI,sBAAMrB,UAAU,cAAhB,SAA+BV,IAC/B,cAAC,EAAD,CAAoBkB,KAAMP,KAAKZ,MAAMmB,UAEzC,wBAAQR,UAAU,iBAAiB2B,QAASL,IAC5C,wBAAQtB,UAAU,oBAAoB2B,QAASP,a,GAzDrCd,iBAAbW,EAKVW,aAAe,CAClBR,UAAW,WACPS,QAAQC,IAAI,kCAEhBT,kBAAmB,WACfQ,QAAQC,IAAI,0CAEhBR,gBAAiB,WACbO,QAAQC,IAAI,wCAEhBvC,cAAe,WACXsC,QAAQC,IAAI,sCAEhBP,WAAW,EACXC,SAAS,G,+BCrBIO,E,4MACjB1C,MAAQ,CACJC,MAAO,I,EAwBXC,cAAgB,SAACC,GACb,EAAKC,SAAS,CACVH,MAAOE,EAAME,OAAOC,S,4CAI5B,WAAU,IAEFqC,EAFC,OACL,EAA+F/B,KAAKH,MAA7FmC,EAAP,EAAOA,SAAUb,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,kBAAmBC,EAA/C,EAA+CA,gBAAiBH,EAAhE,EAAgEA,SAAUe,EAA1E,EAA0EA,OAwC1E,OAtCwBF,EAFxB,EAAkFT,UAEvEY,SAAwBF,EAASG,QAAO,SAAAC,GAAI,OAAIA,EAAKd,aAAWe,KAAI,SAACD,GAC5E,IAAOE,EAAoBF,EAApBE,GAAOC,EAAd,YAA2BH,EAA3B,GACA,OACI,+BACQ,cAAC,EAAD,2BAAUG,GAAV,IACMpB,UAAW,kBAAMA,EAAUmB,IAC3BlB,kBAAmB,kBAAMA,EAAkBkB,IAC3CjB,gBAAiB,kBAAMA,EAAgBiB,IACvChD,cAAe,kBAAM,EAAKA,eAC1B4B,SAAU,kBAAMA,EAASoB,EAAI,EAAKlD,MAAMC,YAN3CiD,MAQZL,EAAOC,SACCF,EAASG,QAAO,SAAAC,GAAI,OAAKA,EAAKd,aAAWe,KAAI,SAACD,GACrD,IAAOE,EAAoBF,EAApBE,GAAOC,EAAd,YAA2BH,EAA3B,GACA,OACI,+BACI,cAAC,EAAD,2BAAUG,GAAV,IACMpB,UAAW,kBAAMA,EAAUmB,IAC3BlB,kBAAmB,kBAAMA,EAAkBkB,IAC3CjB,gBAAiB,kBAAMA,EAAgBiB,IACvChD,cAAe,kBAAM,EAAKA,eAC1B4B,SAAU,kBAAMA,EAASoB,EAAI,EAAKlD,MAAMC,YANvCiD,MASDN,EAASK,KAAI,SAACD,GAChC,IAAOE,EAAoBF,EAApBE,GAAOC,EAAd,YAA2BH,EAA3B,GACA,OACI,+BACQ,cAAC,EAAD,2BAAUG,GAAV,IACMpB,UAAW,kBAAMA,EAAUmB,IAC3BlB,kBAAmB,kBAAMA,EAAkBkB,IAC3CjB,gBAAiB,kBAAMA,EAAgBiB,IACvChD,cAAe,kBAAM,EAAKA,eAC1B4B,SAAU,kBAAMA,EAASoB,EAAI,EAAKlD,MAAMC,YAN3CiD,MAYf,oBAAIvC,UAAU,YAAd,SACKgC,Q,GA3EqB1B,iBAAjByB,EAIVH,aAAe,CAClBK,SAAU,GACVZ,kBAAmB,WACfQ,QAAQC,IAAI,0CAEhBR,gBAAiB,WACbO,QAAQC,IAAI,wCAEhBX,SAAU,WACNU,QAAQC,IAAI,iCAEhBI,OAAQ,GACRX,UAAW,I,IChBEkB,E,4JAcjB,WACI,MAA4CxC,KAAKH,MAA1CR,EAAP,EAAOA,MAAO6C,EAAd,EAAcA,SAAUO,EAAxB,EAAwBA,iBACxB,OACI,wBAAQ1C,UAAWyB,IAAW,CAACU,aACvBR,QAASe,EADjB,SACoCpD,Q,GAlBRgB,iBAAnBmC,EACVb,aAAe,CAClBO,UAAU,EACVO,iBAAkB,WACdb,QAAQC,IAAI,yCAEhBxC,MAAO,I,aCNMqD,E,4JAgBjB,WACI,MAAgE1C,KAAKH,MAA9DkC,EAAP,EAAOA,SAAUY,EAAjB,EAAiBA,iBAAkBF,EAAnC,EAAmCA,iBAAkBG,EAArD,EAAqDA,QAE/CC,EAAgBd,EAASM,KAAI,SAACD,GAChC,IAAOE,EAAoBF,EAApBE,GAAOC,EAAd,YAA2BH,EAA3B,GACA,OACI,6BACI,cAAC,EAAD,2BACQG,GADR,IAEIE,iBAAkB,kBAAMA,EAAiBH,QAHxCA,MAQjB,OACI,yBAAQvC,UAAU,SAAlB,UACI,uBAAMA,UAAU,aAAhB,UAA8B4C,EAA9B,iBACA,oBAAI5C,UAAU,UAAd,SACK8C,IAEL,wBAAQ9C,UAAU,kBAAkB2B,QAASkB,EAA7C,oC,GApCoBvC,iBAAfqC,EACVf,aAAe,CAClBiB,QAAS,WACLhB,QAAQC,IAAI,gCAEhBY,iBAAkB,WACdb,QAAQC,IAAI,0CCVxB,IAAIiB,EAAS,EACPC,EAAiB,SAAC1D,GAAmE,IAA5DiC,EAA2D,wDAAzCC,EAAyC,wDAAzBW,EAAyB,4DAAdc,EACxE,MAAO,CACH3D,QACAiD,GAAIQ,IACJxB,YACAC,UACAW,aAGFe,EAAa,CACfF,EAAe,WAAOC,OAAWA,GAAW,GAC5CD,EAAe,cAAUC,OAAWA,GAAW,GAC/CD,EAAe,iBAAaC,OAAWA,GAAW,IAEhDhB,EAAW,GCRXkB,E,4MACFJ,OAAS,E,EACT1D,MAAQ,CACJ6D,aACAjB,Y,EAGJmB,WAAa,SAACb,GACV,EAAK9C,UAAS,YAAiB,IAAfwC,EAAc,EAAdA,SACNoB,EAAMpB,EAASqB,WAAU,SAACC,GAAD,OAAQA,EAAGhB,KAAOA,KAEjD,MAAO,CACHN,SAFU,sBAAOA,EAASuB,MAAM,EAAGH,IAAzB,YAAkCpB,EAASuB,MAAMH,EAAM,U,EAM7ElC,SAAW,SAACoB,EAAIkB,GACZ,EAAKhE,UAAS,YAAiB,IAAfwC,EAAc,EAAdA,SACNoB,EAAMpB,EAASqB,WAAU,SAACC,GAAD,OAAQA,EAAGhB,KAAOA,KAC3CmB,EAAUV,EAAeS,GAE/B,MAAO,CACHxB,SAFU,sBAAOA,EAASuB,MAAM,EAAGH,IAAzB,CAA+BK,GAA/B,YAA2CzB,EAASuB,MAAMH,EAAM,U,EAMtFtD,QAAU,SAAC0D,GACP,IAAMC,EAAUV,EAAeS,GAC/B,EAAKhE,UAAS,YAAiB,IAAfwC,EAAc,EAAdA,SAEZ,MAAO,CACHA,SAFQ,sBAAOA,GAAP,CAAiByB,S,EA0BrCrC,kBAAoB,SAACkB,GACjB,EAAK9C,UAAS,YAAiB,IAAfwC,EAAc,EAAdA,SACZ,MAAO,CACHA,SAAU,EAAK0B,eAAe1B,EAAUM,EAAI,kB,EAIxDjB,gBAAkB,SAACiB,GACf,EAAK9C,UAAS,YAAiB,IAAfwC,EAAc,EAAdA,SACZ,MAAO,CACHA,SAAU,EAAK0B,eAAe1B,EAAUM,EAAI,gB,EAKxDG,iBAAmB,SAACH,GAChB,EAAK9C,UAAS,YAAmB,IAAjByD,EAAgB,EAAhBA,WACZ,MAAO,CAACA,WAAY,EAAKU,eAAeV,EAAYX,EAAI,iB,EAGhEM,QAAU,WACN,EAAKpD,UAAS,YAEV,MAAO,CACHwC,SAHsB,EAAdA,SACaG,QAAO,SAAAC,GAAI,OAAKA,EAAKd,kB,oDAzCtD,SAAesC,EAAKtB,EAAIuB,GACpB,IAAMT,EAAMQ,EAAIP,WAAU,SAACC,GAAD,OAAQA,EAAGhB,KAAOA,KACtCwB,EAAUF,EAAIR,GACdK,EAAO,2BAAOK,GAAP,kBAAiBD,GAAYC,EAAQD,KAClD,MAAM,GAAN,mBAAWD,EAAIL,MAAM,EAAGH,IAAxB,CACIK,GADJ,YAEOG,EAAIL,MAAMH,EAAM,O,4BAG3B,SAAeQ,EAAKtB,GAChB,IAAMc,EAAMQ,EAAIP,WAAU,SAACC,GAAD,OAAQA,EAAGhB,KAAOA,KACtCwB,EAAUF,EAAIR,GACdK,EAAO,2BAAOK,GAAP,IAAgB5B,UAAW4B,EAAQ5B,WAIhD,MAHU,sBAAO0B,EAAIL,MAAM,EAAGH,IAApB,CACNK,GADM,YAEHG,EAAIL,MAAMH,EAAM,KACTf,KAAI,SAAA0B,GAAG,OAAIA,IAAQN,EAAR,2BAAsBM,GAAtB,IAA2B7B,UAAU,IAArC,2BAAkD6B,GAAlD,IAAuD7B,UAAU,S,oBAgC9F,WACI,MAA+BlC,KAAKZ,MAA7B4C,EAAP,EAAOA,SAAUiB,EAAjB,EAAiBA,WACXN,EAAmBX,EAASG,QAAO,SAACmB,GAAD,OAASA,EAAGhC,aAAW0C,OAChE,cAAiCf,EAAjC,GAAOgB,EAAP,KAAYhC,EAAZ,KAAoBX,EAApB,KACA,OACI,qCAAE,cAAC,EAAD,CAAaxB,QAASE,KAAKF,UACzB,0BAASC,UAAU,OAAnB,UACI,cAAC,EAAD,CACIiC,SAAUA,EACVb,UAAWnB,KAAKmD,WAChB/B,kBAAmBpB,KAAKoB,kBACxBC,gBAAiBrB,KAAKqB,gBACtBH,SAAUlB,KAAKkB,SACf+C,IAAKA,EACLhC,OAAQA,EACRX,UAAWA,IACf,cAAC,EAAD,CAAQS,SAAUkB,EACVN,iBAAkBA,EAClBF,iBAAkBzC,KAAKyC,iBACvBG,QAAS5C,KAAK4C,oB,GAvGvBvC,kBA8GP,WACR6D,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,aCpHrDC,K","file":"static/js/main.51e968d2.chunk.js","sourcesContent":["import React, {PureComponent} from 'react';\r\n\r\nexport default class NewTaskForm extends PureComponent {\r\n    state = {\r\n        label: '',\r\n    };\r\n    onLabelChange = (event) => {\r\n        this.setState({\r\n            label: event.target.value\r\n        });\r\n    };\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.addItem(this.state.label);\r\n        this.setState({\r\n            label: ''\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <header className='header'>\r\n                <h1>todos</h1>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <input type='text'\r\n                           className=\"new-todo\"\r\n                           placeholder=\"What needs to be done?\" autoFocus={true}\r\n                           onChange={this.onLabelChange}\r\n                           value={this.state.label}/>\r\n                </form>\r\n            </header>\r\n        );\r\n    };\r\n};","import React, {PureComponent} from 'react';\r\nimport {formatDistanceToNow} from 'date-fns';\r\n\r\nexport default class TimeOfCreationTask extends PureComponent {\r\n    state = {\r\n        date: '',\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(() => this.getDate(), 0);\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    };\r\n\r\n    getDate = () => {\r\n        let date = formatDistanceToNow(this.props.date, {addSuffix: true, includeSeconds: true});\r\n        this.setState({date})\r\n    };\r\n\r\n    render() {\r\n        const {date} = this.state;\r\n        return (\r\n            <form onSubmit={this.componentDidMount}>\r\n        <span className=\"created\">\r\n            created {date}\r\n        </span>\r\n            </form>)\r\n    };\r\n};","import React, {PureComponent} from 'react';\r\n// import {formatDistanceToNow} from 'date-fns';\r\nimport classNames from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\nimport TimeOfCreationTask from './TimeOfCreationTask';\r\n\r\nexport default class Task extends PureComponent {\r\n    state = {\r\n        label: '',\r\n        date: new Date(),\r\n    };\r\n    static defaultProps = {\r\n        onDeleted: () => {\r\n            console.log('function onDeleted not passed')\r\n        },\r\n        onToggleCompleted: () => {\r\n            console.log('function onToggleCompleted not passed')\r\n        },\r\n        onToggleEditing: () => {\r\n            console.log('function onToggleEditing not passed')\r\n        },\r\n        onLabelChange: () => {\r\n            console.log('function onLabelChange not passed')\r\n        },\r\n        completed: false,\r\n        editing: false,\r\n    }\r\n    static propTypes = {\r\n        label: PropTypes.string.isRequired,\r\n        onDeleted: PropTypes.func.isRequired,\r\n        onToggleCompleted: PropTypes.func,\r\n        onToggleEditing: PropTypes.func,\r\n        completed: PropTypes.bool,\r\n        editing: PropTypes.bool,\r\n        onLabelChange: PropTypes.func,\r\n    }\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.editItem(this.state.label);\r\n        this.setState({\r\n            label: '',\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {label, onDeleted, onToggleCompleted, onToggleEditing, completed, editing, onLabelChange} = this.props;\r\n        return ((editing) ? (\r\n                <li className={classNames({editing})}>\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <input type=\"text\" className=\"edit\"\r\n                               onChange={onLabelChange(this.state.label)}\r\n                               defaultValue={this.state.label}\r\n                               autoFocus={true}/>\r\n                    </form>\r\n                </li>) : (\r\n                <li className={classNames({completed})}>\r\n                    <div className=\"view\">\r\n                        <input className=\"toggle\" type=\"checkbox\" onClick={onToggleCompleted}/>\r\n                        <label>\r\n                            <span className=\"description\">{label}</span>\r\n                            <TimeOfCreationTask date={this.state.date}/>\r\n                        </label>\r\n                        <button className=\"icon icon-edit\" onClick={onToggleEditing}/>\r\n                        <button className=\"icon icon-destroy\" onClick={onDeleted}/>\r\n                    </div>\r\n                </li>)\r\n        );\r\n    };\r\n};","import React, {PureComponent} from 'react';\r\nimport Task from \"./Task\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class TaskList extends PureComponent {\r\n    state = {\r\n        label: '',\r\n    };\r\n    static defaultProps = {\r\n        todoData: [],\r\n        onToggleCompleted: () => {\r\n            console.log('function onToggleCompleted not passed')\r\n        },\r\n        onToggleEditing: () => {\r\n            console.log('function onToggleEditing not passed')\r\n        },\r\n        editItem: () => {\r\n            console.log('function editItem not passed')\r\n        },\r\n        active: {},\r\n        completed: {},\r\n    }\r\n    static propTypes = {\r\n        todoData: PropTypes.arrayOf(PropTypes.object),\r\n        onDeleted: PropTypes.func.isRequired,\r\n        onToggleCompleted: PropTypes.func,\r\n        onToggleEditing: PropTypes.func,\r\n        active: PropTypes.object,\r\n        completed: PropTypes.object,\r\n    }\r\n    onLabelChange = (event) => {\r\n        this.setState({\r\n            label: event.target.value,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {todoData, onDeleted, onToggleCompleted, onToggleEditing, editItem, active, completed} = this.props;\r\n        let elements;\r\n        (completed.selected) ? (elements = todoData.filter(item => item.completed).map((item) => {\r\n            const {id, ...itemProps} = item;\r\n            return (\r\n                <span key={id}>\r\n                        <Task {...itemProps}\r\n                              onDeleted={() => onDeleted(id)}\r\n                              onToggleCompleted={() => onToggleCompleted(id)}\r\n                              onToggleEditing={() => onToggleEditing(id)}\r\n                              onLabelChange={() => this.onLabelChange}\r\n                              editItem={() => editItem(id, this.state.label)}/>\r\n                    </span>);\r\n        })) : (active.selected) ? (\r\n            elements = todoData.filter(item => !item.completed).map((item) => {\r\n                const {id, ...itemProps} = item;\r\n                return (\r\n                    <span key={id}>\r\n                        <Task {...itemProps}\r\n                              onDeleted={() => onDeleted(id)}\r\n                              onToggleCompleted={() => onToggleCompleted(id)}\r\n                              onToggleEditing={() => onToggleEditing(id)}\r\n                              onLabelChange={() => this.onLabelChange}\r\n                              editItem={() => editItem(id, this.state.label)}/>\r\n                            </span>\r\n                );\r\n            })) : (elements = todoData.map((item) => {\r\n            const {id, ...itemProps} = item;\r\n            return (\r\n                <span key={id}>\r\n                        <Task {...itemProps}\r\n                              onDeleted={() => onDeleted(id)}\r\n                              onToggleCompleted={() => onToggleCompleted(id)}\r\n                              onToggleEditing={() => onToggleEditing(id)}\r\n                              onLabelChange={() => this.onLabelChange}\r\n                              editItem={() => editItem(id, this.state.label)}/>\r\n                        </span>\r\n            );\r\n        }));\r\n\r\n        return (\r\n            <ul className=\"todo-list\">\r\n                {elements}\r\n            </ul>);\r\n    };\r\n};","import React, {PureComponent} from 'react';\r\nimport classNames from \"classnames\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class TaskFilter extends PureComponent {\r\n    static defaultProps = {\r\n        selected: false,\r\n        onToggleSelected: () => {\r\n            console.log('function onToggleSelected not passed')\r\n        },\r\n        label: '',\r\n    };\r\n    static propTypes = {\r\n        label: PropTypes.string,\r\n        selected: PropTypes.bool,\r\n        onToggleSelected: PropTypes.func\r\n    };\r\n\r\n    render() {\r\n        const {label, selected, onToggleSelected} = this.props;\r\n        return (\r\n            <button className={classNames({selected})}\r\n                    onClick={onToggleSelected}>{label}\r\n            </button>\r\n        );\r\n    };\r\n};","import React, {PureComponent} from 'react';\r\nimport TaskFilter from \"./TaskFilter\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class Footer extends PureComponent {\r\n    static defaultProps = {\r\n        onClear: () => {\r\n            console.log('function onClear not passed')\r\n        },\r\n        onToggleSelected: () => {\r\n            console.log('function onToggleSelected not passed')\r\n        },\r\n    };\r\n    static propTypes = {\r\n        elements: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n        activeTaskLength: PropTypes.number.isRequired,\r\n        onToggleSelected: PropTypes.func,\r\n        onClear: PropTypes.func,\r\n    };\r\n\r\n    render() {\r\n        const {elements, activeTaskLength, onToggleSelected, onClear} = this.props;\r\n\r\n        const elementFilter = elements.map((item) => {\r\n            const {id, ...itemProps} = item;\r\n            return (\r\n                <li key={id}>\r\n                    <TaskFilter\r\n                        {...itemProps}\r\n                        onToggleSelected={() => onToggleSelected(id)}\r\n                    />\r\n                </li>\r\n            );\r\n        });\r\n        return (\r\n            <footer className=\"footer\">\r\n                <span className=\"todo-count\">{activeTaskLength} items left</span>\r\n                <ul className=\"filters\">\r\n                    {elementFilter}\r\n                </ul>\r\n                <button className=\"clear-completed\" onClick={onClear}>Clear completed</button>\r\n            </footer>\r\n        );\r\n    };\r\n};","let itemId = 1;\r\nconst createTodoItem = (label, completed=false , editing=false , selected = undefined) => {\r\n    return {\r\n        label,\r\n        id: itemId++,\r\n        completed,\r\n        editing,\r\n        selected,\r\n    };\r\n};\r\nconst filterElem = [\r\n    createTodoItem('All', undefined, undefined, false),\r\n    createTodoItem('Active', undefined, undefined, false),\r\n    createTodoItem('Completed', undefined, undefined, false),\r\n];\r\nconst todoData = [];\r\nexport {filterElem, todoData, createTodoItem};","import React, {PureComponent} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport NewTaskForm from \"./NewTaskForm\";\r\nimport TaskList from \"./TaskList\";\r\nimport Footer from \"./Footer\";\r\nimport {todoData, filterElem, createTodoItem} from \"./constants/constants\";\r\n\r\nclass Form extends PureComponent {\r\n    itemId = 1;\r\n    state = {\r\n        filterElem,\r\n        todoData,\r\n    };\r\n\r\n    deleteItem = (id) => {\r\n        this.setState(({todoData}) => {\r\n            const idx = todoData.findIndex((el) => el.id === id);\r\n            const newArray = [...todoData.slice(0, idx), ...todoData.slice(idx + 1)];\r\n            return {\r\n                todoData: newArray\r\n            };\r\n        });\r\n    };\r\n    editItem = (id, text) => {\r\n        this.setState(({todoData}) => {\r\n            const idx = todoData.findIndex((el) => el.id === id);\r\n            const newItem = createTodoItem(text);\r\n            const newArray = [...todoData.slice(0, idx), newItem, ...todoData.slice(idx + 1)];\r\n            return {\r\n                todoData: newArray\r\n            };\r\n        });\r\n    };\r\n    addItem = (text) => {\r\n        const newItem = createTodoItem(text);\r\n        this.setState(({todoData}) => {\r\n            const newArr = [...todoData, newItem];\r\n            return {\r\n                todoData: newArr\r\n            };\r\n        });\r\n    };\r\n\r\n    toggleProperty(arr, id, propName) {\r\n        const idx = arr.findIndex((el) => el.id === id);\r\n        const oldItem = arr[idx];\r\n        const newItem = {...oldItem, [propName]: !oldItem[propName]};\r\n        return [...arr.slice(0, idx),\r\n            newItem,\r\n            ...arr.slice(idx + 1)];\r\n    };\r\n\r\n    toggleSelected(arr, id) {\r\n        const idx = arr.findIndex((el) => el.id === id);\r\n        const oldItem = arr[idx];\r\n        const newItem = {...oldItem, selected: !oldItem.selected};\r\n        let newArr = [...arr.slice(0, idx),\r\n            newItem,\r\n            ...arr.slice(idx + 1)];\r\n        return newArr.map(obj => obj !== newItem ? {...obj, selected: false} : {...obj, selected: true});\r\n    };\r\n\r\n    onToggleCompleted = (id) => {\r\n        this.setState(({todoData}) => {\r\n            return {\r\n                todoData: this.toggleProperty(todoData, id, 'completed')\r\n            };\r\n        });\r\n    };\r\n    onToggleEditing = (id) => {\r\n        this.setState(({todoData}) => {\r\n            return {\r\n                todoData: this.toggleProperty(todoData, id, 'editing')\r\n            };\r\n        });\r\n    };\r\n\r\n    onToggleSelected = (id) => {\r\n        this.setState(({filterElem}) => {\r\n            return {filterElem: this.toggleSelected(filterElem, id, 'selected')};\r\n        });\r\n    };\r\n    onClear = () => {\r\n        this.setState(({todoData}) => {\r\n            const newArr = (todoData.filter(item => !item.completed))\r\n            return {\r\n                todoData: newArr\r\n            };\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {todoData, filterElem} = this.state;\r\n        const activeTaskLength = todoData.filter((el) => !el.completed).length;\r\n        const [all, active, completed] = filterElem;\r\n        return (\r\n            <><NewTaskForm addItem={this.addItem}/>\r\n                <section className='main'>\r\n                    <TaskList\r\n                        todoData={todoData}\r\n                        onDeleted={this.deleteItem}\r\n                        onToggleCompleted={this.onToggleCompleted}\r\n                        onToggleEditing={this.onToggleEditing}\r\n                        editItem={this.editItem}\r\n                        all={all}\r\n                        active={active}\r\n                        completed={completed}/>\r\n                    <Footer elements={filterElem}\r\n                            activeTaskLength={activeTaskLength}\r\n                            onToggleSelected={this.onToggleSelected}\r\n                            onClear={this.onClear}/>\r\n                </section>\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nconst App = () => {\r\n    ReactDOM.render(<Form/>, document.getElementById('todoapp'));\r\n};\r\nexport default App;","import './style.scss';\r\nimport App from './components/App';\r\nApp();"],"sourceRoot":""}